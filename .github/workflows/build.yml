# This workflow will build and test the OpenRAG Python application
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests

name: Build and Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

# Defines environment variables for the workflow
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.12"

jobs:
  build-package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && github.event.base_ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV and build tools
        run: |
          pip install uv build setuptools-scm

      - name: Install dependencies
        run: |
          uv sync

      - name: Build Python package
        run: |
          python -m build

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/*

  build-and-push-image:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && github.event.base_ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      attestations: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract tag version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SETUPTOOLS_SCM_PRETEND_VERSION=${{ steps.get_version.outputs.version }}

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && github.event.base_ref == 'refs/heads/main'
    needs: [build-package, build-and-push-image]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          generateReleaseNotes: true
          draft: false
          prerelease: false
