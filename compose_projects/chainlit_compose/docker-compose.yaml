version: '3.9'

services:
  chainlit-app:
    image: ${IMAGE_NAME}:${TAG}
    container_name: ${CONTAINER_NAME}
    working_dir: /${WORKDIR}
    volumes:
      - ${PWD}/README.md:/${WORKDIR}/README.md
      - ${PWD}/pyproject.toml:/${WORKDIR}/pyproject.toml
      - ${PWD}/poetry.lock:/${WORKDIR}/poetry.lock
      - ${PWD}/chainlit_app.py:/${WORKDIR}/chainlit_app.py
      - venv:/${WORKDIR}/${ENVS_PATH}/${VENV_NAME}
      - hydra_config:/${WORKDIR}/${CONFIG_PATH}
      - chainlit_app:/${WORKDIR}/app
      - source:/${WORKDIR}/src
      - pickled_weights:/${WORKDIR}/model_weights
    
    environment:
      - POETRY_VIRTUALENVS_PATH=/${WORKDIR}/${ENVS_PATH}/${VENV_NAME}
      - POETRY_VIRTUALENVS_CREATE=true
      - POETRY_VIRTUALENVS_IN_PROJECT=false

    network_mode: bridge

    
    ports:
      - "${APP_PORT}:${APP_PORT}"
    env_file:
      - .env.compose

    
    command: >
      bash -c "
        echo 'PATH: $PATH' && \
        
        if [ ! -f poetry.lock ] || [ pyproject.toml -nt poetry.lock ]; then
          echo 'Installing dependencies...' && \
          poetry env use python3.12 && \
          poetry install --no-interaction -vv --no-root; 
        else
          echo 'Dependencies are up to date';
        fi && \
        echo 'Current environment variables:' && \
        printenv && \
        echo 'Container is running. Use docker exec -it RAGondin bash to connect.' && \
        poetry run chainlit run chainlit_app.py --watch --host ${APP_HOST} --port ${APP_PORT}
      "
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all 
              capabilities: [gpu]


volumes:
  hydra_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: '${PWD}/${CONFIG_PATH}'

  venv:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: '${PWD}/${ENVS_PATH}/RAGondin_rag_chainlit'

  chainlit_app:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: '${PWD}/app'

  source:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: '${PWD}/src'


  pickled_weights:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: '${PWD}/model_weights'
